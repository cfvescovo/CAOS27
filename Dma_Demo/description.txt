1. Example Description
    This application demonstrates the usage of the Mcl Driver.
    The application includes a S32CT project that configures the Mcu and Platform drivers.
    1.1 The aplication software functionality
            - Clock_Ip_InitClock
                    Initialize the clock sources, the clock tree and to configure the clock gating of the peripherals.
                    The clock configuration that is used will enable and use the PLL as source clock.
            - IntCtrl_Ip_Init
                    Initialize the interrupt controller and to apply the interrupt configuration according to the Platform configuration.
            - IntCtrl_Ip_InstallHandler
                    Install the ISR for the DMA Logic Channel 0, Logic Channel 1 and Logic Channel 2.
            - Dma_Ip_Init
                    Initialize the DMA IP Driver: Initialize the DMA Logic Instance and DMA Logic Channel 0 , Logic Channel 1 and Logic Channel 2..
                    Logic Channel 0 is configured in S32CT to run in Normal Transfer Mode.
                    Logic Channel 1 is configured runtime to run in Normal Transfer Mode.
                    Logic Channel 2 is configured in S32CT to run in Scatter/Gather Mode.
            - Dma_Ip_SetLogicChannelTransferList
                    Configures at runtime, the selected Logic Channel, with Normal Transfer Mode Source Address and Destination Address parameters.
            - Dma_Ip_SetLogicChannelScatterGatherList
                    Configures at runtime, the selected Logic Element of the selected Logic Channel, with Scatter/Gather Mode Source Address and Destination Address parameters.
            - Dma_Ip_SetLogicChannelCommand
                    Configures at runtime, the selected Logic Element of the selected Logic Channel, with Scatter/Gather Mode Source Address and Destination Address parameters.
            - Cache_Ip_InvalidateByAddr
                    Invalidates the specified buffer in Cache. The buffer shall be 32 bytes aligned.
			- Validation Point 
					Status = True (Verify that the Dma result returned corresponds to the expected value)

2. Installation steps
    2.1 Hardware installation
        2.1.1 Supported boards
        - Mother Board: X-S32K3XXX-MB PCB 47386 RevA SCH RevA
        - Silicon: P32K358GVS 0P14E CTZF2233B
        - Daughter Card: XS32K3X8CVB-Q289 PCB 53108 RevX3 SCH RevA1
        2.1.2 Connections
        - Powered board through power Adapter 12V
        2.1.3 Debugger
        - The GDB PEMicro debugger must be connected to J20 JTAG Cortex Debug connector.
    2.2 Software installation
        Make sure that all RTD plugins are already installed in the S32DS plugins directory
3. How to run
    3.1 Importing the project into the workspace
        After opening S32 Design Studio, go to \b File -> \b Import... ->\b Existing Projects into Workspace -> \b Browse... directory to "*\*\dev\drivers\AutoSAR\mcl\test_mcl\specific\S32K3XX\examples\S32DS\Mcl_Example_CT"  check the checkbox of "Mcl_Example_CT" check the checkbox "Copy projects into workspace" => \b Finish
        The project should now be copied into you current workspace.
        Wait for the S32 Configuration was initialized and ready.
    3.2 Generating the S32 configuration
        The example will run without an active configuration, however if any changes are required, a configuration needs to be generated.
        The initial configuration will have the same settings as the default example settings.
        Right click on the current project, then click "S32 Configuration Tool" choose "Open Peripherals".
        Pay attention to any error and warning message. If any configured value is invalid, they will be shown for user.
        Make the desired changes (if any) then click "Update Code".
    3.3 Building the project
                Select the configuration to be built: FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the build button in eclipse.
                Use Project > Build to build the project.
                Wait for the build action to be completed before continuing to the next step. Check the compiler console for error messages; upon completion, the *.elf binary file should be created.
    3.4 Running the project
                Go to Run and select Debug Configurations. There will be a debug configuration for this project:

				Configuration Name                  				 Description
				-------------------------------     				 -----------------------
				Dma_Ip_DmaTransfer_S32K358_debug_flash_pemicro      Debug the FLASH configuration using PEmicro probe

                Select the desired debug configuration and click on Launch. Now the perspective will change to the Debug Perspective.
                Use the controls to control the program flow.